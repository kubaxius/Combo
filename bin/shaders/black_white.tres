[gd_resource type="VisualShader" load_steps=10 format=3 uid="uid://bblnwnktfdsn2"]

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_vl787"]
source = 5

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_vl787"]
default_input_values = [0, Vector2(0, 0), 1, Vector2(1, 1)]
op_type = 0
operator = 4

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_g04gi"]
default_input_values = [0, Vector2(0, 0), 1, Vector2(0, 0.001)]
op_type = 0

[sub_resource type="VisualShaderNodeIf" id="VisualShaderNodeIf_g04gi"]
default_input_values = [0, 0.0, 1, 0.0, 2, 1e-05, 3, Vector3(-1, 0, 0), 4, Vector3(0, 0, 0), 5, Vector3(-1, 0, 0)]

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_2m74d"]

[sub_resource type="VisualShaderNodeIf" id="VisualShaderNodeIf_ja5c0"]
default_input_values = [0, 0.0, 1, 0.0, 2, 1e-05, 3, Vector3(0, 0, 0), 4, Vector3(1, 1, 1), 5, Vector3(0, 0, 0)]
expanded_output_ports = [0]

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_vl787"]
parameter_name = "Texture2DParameter"
texture_filter = 1
texture_repeat = 2
texture_source = 1

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_g04gi"]
output_port_for_preview = 0
expanded_output_ports = [0]
source = 5

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_2m74d"]
input_name = "uv"

[resource]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D Texture2DParameter : filter_nearest, repeat_disable, hint_screen_texture;



void fragment() {
// Input:8
	vec2 n_out8p0 = UV;


	vec4 n_out7p0;
// Texture2D:7
	n_out7p0 = texture(Texture2DParameter, n_out8p0);


	vec3 n_out16p0;
// If:16
	float n_in16p1 = 0.00000;
	float n_in16p2 = 0.00001;
	vec3 n_in16p3 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_in16p4 = vec3(1.00000, 1.00000, 1.00000);
	vec3 n_in16p5 = vec3(0.00000, 0.00000, 0.00000);
	if(abs(n_out7p0.x - n_in16p1) < n_in16p2)
	{
		n_out16p0 = n_in16p3;
	}
	else if(n_out7p0.x < n_in16p1)
	{
		n_out16p0 = n_in16p5;
	}
	else
	{
		n_out16p0 = n_in16p4;
	}
	float n_out16p1 = n_out16p0.r;


// Output:0
	COLOR.rgb = vec3(n_out16p1);


}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(1180, 100)
nodes/fragment/6/node = SubResource("VisualShaderNodeTexture2DParameter_vl787")
nodes/fragment/6/position = Vector2(-760, 20)
nodes/fragment/7/node = SubResource("VisualShaderNodeTexture_g04gi")
nodes/fragment/7/position = Vector2(-320, 40)
nodes/fragment/8/node = SubResource("VisualShaderNodeInput_2m74d")
nodes/fragment/8/position = Vector2(-760, -60)
nodes/fragment/11/node = SubResource("VisualShaderNodeTexture_vl787")
nodes/fragment/11/position = Vector2(240, -180)
nodes/fragment/12/node = SubResource("VisualShaderNodeVectorOp_vl787")
nodes/fragment/12/position = Vector2(-140, -180)
nodes/fragment/13/node = SubResource("VisualShaderNodeVectorOp_g04gi")
nodes/fragment/13/position = Vector2(-360, -180)
nodes/fragment/14/node = SubResource("VisualShaderNodeIf_g04gi")
nodes/fragment/14/position = Vector2(500, -180)
nodes/fragment/15/node = SubResource("VisualShaderNodeFloatOp_2m74d")
nodes/fragment/15/position = Vector2(700, -40)
nodes/fragment/16/node = SubResource("VisualShaderNodeIf_ja5c0")
nodes/fragment/16/position = Vector2(580, 200)
nodes/fragment/connections = PackedInt32Array(8, 0, 7, 0, 6, 0, 7, 2, 6, 0, 11, 2, 12, 0, 11, 0, 8, 0, 13, 0, 13, 0, 12, 0, 11, 0, 14, 0, 14, 0, 15, 0, 7, 0, 16, 0, 16, 1, 0, 0)
